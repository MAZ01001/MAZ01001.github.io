function hasContent(object = {}) {for(let key in object){if(object.hasOwnProperty(key)){return true;}}return false;}
let dataObjects = {
    'example_part':{ //! example only
        idName:'example_part', // lowercase name as id (only word char [a-z0-9_])
        name:'Example Part', // main-product
        imgSrc:'.\\icon\\HUB_Parts.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Satisfactory_Wiki', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:true,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5, // nuclear waste rate per min
            },
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0, // num needed of (idName) for building the building
            },
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                },
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        },
                    },
                },
            },
        },
    },
    'bacon_agaric':{
        idName:'bacon_agaric', // lowercase name as id (only word char [a-z0-9_])
        name:'Bacon Agaric', // main-product
        imgSrc:'.\\icon\\Bacon_Agaric.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Bacon_Agaric', // gamepedia link
        info:'Can be eaten to restore two health segments.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:50, // x max per itemslot (-1 if not an item)
        resource:true,
        plant:true,
        consumable:true,
        craftingWorkshop:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'beryl_nut':{
        idName:'beryl_nut', // lowercase name as id (only word char [a-z0-9_])
        name:'Beryl Nut', // main-product
        imgSrc:'.\\icon\\Beryl_Nut.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Beryl_Nut', // gamepedia link
        info:'Can be eaten to restore half a health segment.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:100, // x max per itemslot (-1 if not an item)
        resource:true,
        plant:true,
        consumable:true,
        craftingWorkshop:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'hard_drive':{
        idName:'hard_drive', // lowercase name as id (only word char [a-z0-9_])
        name:'Hard Drive', // main-product
        imgSrc:'.\\icon\\Hard_Drive.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hard_Drive', // gamepedia link
        info:'A hard drive with Ficsit data. Analyze it in the M.A.M. to salvage its contents.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:100, // x max per itemslot (-1 if not an item)
        resource:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'hub_parts':{
        idName:'hub_parts', // lowercase name as id (only word char [a-z0-9_])
        name:'HUB Parts', // main-product
        imgSrc:'.\\icon\\HUB_Parts.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/HUB_Parts', // gamepedia link
        info:'The parts required to build the basic structure of The HUB.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        buildingMaterial:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'paleberry':{
        idName:'paleberry', // lowercase name as id (only word char [a-z0-9_])
        name:'Paleberry', // main-product
        imgSrc:'.\\icon\\Paleberry.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Paleberry', // gamepedia link
        info:'Can be eaten to restore one health segment.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:50, // x max per itemslot (-1 if not an item)
        resource:true,
        plant:true,
        consumable:true,
        craftingWorkshop:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'adequate_pioneering':{
        idName:'adequate_pioneering', // lowercase name as id (only word char [a-z0-9_])
        name:'Adequate Pioneering', // main-product
        imgSrc:'.\\icon\\awesome\\Adequate_Pioneering.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Adequate_Pioneering', // gamepedia link
        info:'The statue of the Running Character', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Adequate Pioneering', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[3,2,2], // w,h,d in meters (0.00m float)
        },
    },
    'confusing_creature':{
        idName:'confusing_creature', // lowercase name as id (only word char [a-z0-9_])
        name:'Confusing Creature', // main-product
        imgSrc:'.\\icon\\awesome\\Confusing_Creature.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Confusing_Creature', // gamepedia link
        info:'The statue of the Space Giraffe', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Confusing Creature', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[2.5,5.5,3], // w,h,d in meters (0.00m float)
        },
    },
    'cup':{
        idName:'cup', // lowercase name as id (only word char [a-z0-9_])
        name:'Cup', // main-product
        imgSrc:'.\\icon\\awesome\\Cup.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Cup', // gamepedia link
        info:'Standard issue Cup for melee range.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        awesomeShop:true, // from awesomeShop
        equipment:true,
        shopPackName:'Cup', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'ficsit_coupon':{
        idName:'ficsit_coupon', // lowercase name as id (only word char [a-z0-9_])
        name:'FICSIT Coupon', // main-product
        imgSrc:'.\\icon\\awesome\\FICSIT_Coupon.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/FICSIT_Coupon', // gamepedia link
        info:'A special FICSIT bonus program Coupon, obtained through the AWESOME Sink. Can be redeemed in the AWESOME Shop for bonus milestones and rewards.', // information about the item
        sinkValue:1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:500, // x max per itemslot (-1 if not an item)
        awesomeShop:true, // from awesomeShop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
    },
    'golden_nut':{
        idName:'golden_nut', // lowercase name as id (only word char [a-z0-9_])
        name:'Golden Nut', // main-product
        imgSrc:'.\\icon\\awesome\\Golden_Nut.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Golden_Nut', // gamepedia link
        info:'The statue of the golden nut', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Golden Nut', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[2.5,3,1], // w,h,d in meters (0.00m float)
        },
    },
    'lizard_doggo_statue':{
        idName:'lizard_doggo_statue', // lowercase name as id (only word char [a-z0-9_])
        name:'Lizard Doggo Statue', // main-product
        imgSrc:'.\\icon\\awesome\\Lizard_Doggo_Statue.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Lizard_Doggo_Statue', // gamepedia link
        info:'The statue of the Lizard Doggo', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Lizard Doggo', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[2,2,4], // w,h,d in meters (0.00m float)
        },
    },
    'pretty_good_pioneering':{
        idName:'pretty_good_pioneering', // lowercase name as id (only word char [a-z0-9_])
        name:'Pretty Good Pioneering', // main-product
        imgSrc:'.\\icon\\awesome\\Pretty_Good_Pioneering.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pretty_Good_Pioneering', // gamepedia link
        info:'The statue of the Clapping Character', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Pretty Good Pioneering', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[2,3,2], // w,h,d in meters (0.00m float)
        },
    },
    'satisfactory_pioneering':{
        idName:'satisfactory_pioneering', // lowercase name as id (only word char [a-z0-9_])
        name:'Satisfactory Pioneering', // main-product
        imgSrc:'.\\icon\\awesome\\Satisfactory_Pioneering.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Satisfactory_Pioneering', // gamepedia link
        info:'The statue of the Character Spinning the Build Gun', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Satisfactory Pioneering', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[1.5,3.5,1.5], // w,h,d in meters (0.00m float)
        },
    },
    'silver_hog':{
        idName:'silver_hog', // lowercase name as id (only word char [a-z0-9_])
        name:'Silver Hog', // main-product
        imgSrc:'.\\icon\\awesome\\Silver_Hog.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Silver_Hog', // gamepedia link
        info:'The statue of the Silver Pouncing Hog. Perfect as a hood ornament.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        statue:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Silver Hog', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[1,2,4], // w,h,d in meters (0.00m float)
        },
    },
    'assembler':{
        idName:'assembler', // lowercase name as id (only word char [a-z0-9_])
        name:'Assembler', // main-product
        imgSrc:'.\\icon\\building\\Assembler.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Assembler', // gamepedia link
        info:'Crafts two parts into another part.\nCan be automated by feeding parts into it with a conveyor belt connected to the input. The produced parts can be automatically extracted by connecting a conveyor belt to the output.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            conveyorInputs:2,
            pipeInputs:0,
            conveyorOutputs:1,
            pipeOutputs:0,
            power:15, // power usage in MW
            dimensions:[10,8,15], // w,h,d in meters (0.00m float)
            items:{
                'reinforced_iron_plate':8, // num needed of (idName) for building the building
                'rotor':4,
                'cable':10,
            },
        },
    },
    'awesome_shop':{
        idName:'awesome_shop', // lowercase name as id (only word char [a-z0-9_])
        name:'AWESOME Shop', // main-product
        imgSrc:'.\\icon\\building\\AWESOME_Shop.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/AWESOME_Shop', // gamepedia link
        info:'Redeem your FICSIT Coupons here!\nFor those employees going the extra kilometer we have set aside special bonus milestones and rewards! Get your Coupons in the AWESOME Sink program now!\n*No refunds possible.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        awesomeShop:true, // from awesomeShop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[4,5,6], // w,h,d in meters (0.00m float)
            items:{
                'screw':200, // num needed of (idName) for building the building
                'iron_plate':10,
                'cable':30,
            },
        },
        shopPacks:{
            'Door Walls':{
                buyType:'single', // [none|single|multi] (can be bought multible times from the awesomeshop)
                buyCost:2,
                'center_door_wall__plating':1, // item and num in shop
                'left_door_wall__plating':1,
                'right_door_wall__plating':1,
                'gate_wall':1,
            },
            'Silver Hog':{
                buyType:'multi',
                buyCost:50,
                'silver_hog':1,
            },
            'Satisfactory Pioneering':{
                buyType:'multi',
                buyCost:150,
                'satisfactory_pioneering':1,
            },
            'Pretty Good Pioneering':{
                buyType:'multi',
                buyCost:50,
                'pretty_good_pioneering':1,
            },
            'Lizard Doggo':{
                buyType:'multi',
                buyCost:100,
                'lizard_doggo_statue':1,
            },
            'Golden Nut':{
                buyType:'multi',
                buyCost:1000,
                'golden_nut':1,
            },
            'Cup':{
                buyType:'multi',
                buyCost:1,
                'example_part':0,
            },
            'Confusing Creature':{
                buyType:'multi',
                buyCost:200,
                'confusing_creature':1,
            },
            'Adequate Pioneering':{
                buyType:'multi',
                buyCost:25,
                'adequate_pioneering':1,
            },
            'Metal Door Walls':{
                buyType:'single',
                buyCost:4,
                'center_door_wall__sheet_metal':1,
                'left_door_wall__sheet_metal':1,
                'right_door_wall__sheet_metal':1,
            },
            'Metal Conveyor Walls':{
                buyType:'single',
                buyCost:7,
                'wall_conveyor_x3':1,
                'wall_conveyor_x2':1,
                'wall_conveyor_x1':1,
            },
            'Biomass':{
                buyType:'multi',
                buyCost:1,
                'biomass':200,
            },
            'Solid Biofuel':{
                buyType:'multi',
                buyCost:2,
                'solid_biofuel':200,
            },
            'Fabric':{
                buyType:'multi',
                buyCost:3,
                'fabric':100,
            },
            'Packaged Liquid Biofuel':{
                buyType:'multi',
                buyCost:3,
                'packaged_liquid_biofuel':100,
            },
            'Cable':{
                buyType:'multi',
                buyCost:2,
                'cable':100,
            },
            'Wire':{
                buyType:'multi',
                buyCost:1,
                'wire':500,
            },
            'A. I. Limiter':{
                buyType:'multi',
                buyCost:3,
                'ai_limiter':100,
            },
            'Quickwire':{
                buyType:'multi',
                buyCost:1,
                'quickwire':500,
            },
            'Circuit Board':{
                buyType:'multi',
                buyCost:3,
                'circuit_board':200,
            },
            'High-Speed Connector':{
                buyType:'multi',
                buyCost:4,
                'high_speed_connector':100,
            },
            'Battery':{
                buyType:'multi',
                buyCost:5,
                'battery':100,
            },
            'Concrete':{
                buyType:'multi',
                buyCost:1,
                'concrete':100,
            },
            'Black Powder':{
                buyType:'multi',
                buyCost:3,
                'black_powder':100,
            },
            'Silica':{
                buyType:'multi',
                buyCost:1,
                'silica':100,
            },
            'Iron Plate':{
                buyType:'multi',
                buyCost:1,
                'iron_plate':100,
            },
            'Iron Rod':{
                buyType:'multi',
                buyCost:1,
                'iron_rod':100,
            },
            'Screw':{
                buyType:'multi',
                buyCost:2,
                'screw':500,
            },
            'Copper Sheet':{
                buyType:'multi',
                buyCost:1,
                'copper_sheet':100,
            },
            'Modular Frame':{
                buyType:'multi',
                buyCost:4,
                'modular_frame':50,
            },
            'Reinforced Iron Plate':{
                buyType:'multi',
                buyCost:3,
                'reinforced_iron_plate':100,
            },
            'Steel Beam':{
                buyType:'multi',
                buyCost:1,
                'steel_beam':100,
            },
            'Steel Pipe':{
                buyType:'multi',
                buyCost:1,
                'steel_pipe':100,
            },
            'Encased Industrial Beam':{
                buyType:'multi',
                buyCost:3,
                'encased_industrial_beam':100,
            },
            'Heavy Modular Frame':{
                buyType:'multi',
                buyCost:6,
                'heavy_modular_frame':50,
            },
            'Aluminum Alclad Sheet':{
                buyType:'multi',
                buyCost:2,
                'alclad_aluminum_sheet':100,
            },
            'Rotor':{
                buyType:'multi',
                buyCost:3,
                'rotor':100,
            },
            'Stator':{
                buyType:'multi',
                buyCost:3,
                'stator':100,
            },
            'Motor':{
                buyType:'multi',
                buyCost:5,
                'motor':50,
            },
            'Heat Sink':{
                buyType:'multi',
                buyCost:3,
                'heat_sink':100,
            },
            'Turbo Motor':{
                buyType:'multi',
                buyCost:8,
                'turbo_motor':50,
            },
            'Crystal Oscillator':{
                buyType:'multi',
                buyCost:4,
                'crystal_oscillator':100,
            },
            'Computer':{
                buyType:'multi',
                buyCost:6,
                'computer':50,
            },
            'Radio Control Unit':{
                buyType:'multi',
                buyCost:7,
                'radio_control_unit':50,
            },
            'Supercomputer':{
                buyType:'multi',
                buyCost:8,
                'supercomputer':50,
            },
            'Empty Canister':{
                buyType:'multi',
                buyCost:2,
                'empty_canister':100,
            },
            'Petroleum Coke':{
                buyType:'multi',
                buyCost:1,
                'petroleum_coke':200,
            },
            'Plastic':{
                buyType:'multi',
                buyCost:1,
                'plastic':100,
            },
            'Rubber':{
                buyType:'multi',
                buyCost:1,
                'rubber':100,
            },
            'Packaged Fuel':{
                buyType:'multi',
                buyCost:3,
                'packaged_fuel':100,
            },
            'Polymer Resin':{
                buyType:'multi',
                buyCost:1,
                'polymer_resin':200,
            },
        },
    },
    'awesome_sink':{
        idName:'awesome_sink', // lowercase name as id (only word char [a-z0-9_])
        name:'AWESOME Sink', // main-product
        imgSrc:'.\\icon\\building\\AWESOME_Sink.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/AWESOME_Sink', // gamepedia link
        info:'Got excess resources? Fear not, for FICSIT does not waste! The newly developed AWESOME Sink turns any useful part straight into research data, as fast as you can supply it!\nParticipating employees will be compensated with Coupons to spend at the AWESOME Shop.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            conveyorInputs:1,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:30, // power usage in MW
            dimensions:[16,24,13], // w,h,d in meters (0.00m float)
            items:{
                'reinforced_iron_plate':15, // num needed of (idName) for building the building
                'cable':30,
                'concrete':45,
            },
        },
    },
    'biomass_burner':{
        idName:'biomass_burner', // lowercase name as id (only word char [a-z0-9_])
        name:'Biomass Burner', // main-product
        imgSrc:'.\\icon\\building\\Biomass_Burner.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Biomass_Burner', // gamepedia link
        info:'Burns various forms of biomass to generate electricity for the power grid. Has no input and must therefore be fed biomass manually.\nResource consumption will automatically be lowered to meet power demands.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:30, // electricity produced in MW total
            fuel:[ //~ IN
                'leaves', // idName of fuel
                'flower_petals','wood','mycelia',
                'biomass','solid_biofuel','packaged_liquid_biofuel',
                'alien_carapace','alien_organs','fabric'
            ],
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            dimensions:[8,7,8], // w,h,d in meters (0.00m float)
            items:{
                'iron_plate':15, // num needed of (idName) for building the building
                'iron_rod':15,
                'wire':25,
            },
        },
    },
    'center_door_wall__plating':{
        idName:'center_door_wall__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Center Door Wall (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Center_Door_Wall_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Center_Door_Wall_(Plating)', // gamepedia link
        info:'Snaps to foundations and other walls. Use these to make buildings with several floors.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Door Walls', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[8,4,1], // w,h,d in meters (0.00m float)
            items:{
                'iron_plate':3, // num needed of (idName) for building the building
                'concrete':3,
            },
        },
    },
    'center_door_wall__sheet_metal':{
        idName:'center_door_wall__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Center Door Wall (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Center_Door_Wall_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Center_Door_Wall_(Sheet_Metal)', // gamepedia link
        info:'Snaps to foundations and other walls. Use these to make buildings with several floors.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        awesomeShop:true, // from awesomeShop
        shopPackName:'Metal Door Walls', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            dimensions:[8,4,1], // w,h,d in meters (0.00m float)
            items:{
                'iron_plate':3, // num needed of (idName) for building the building
                'concrete':3,
            },
        },
    },
    'coal_generator':{
        idName:'coal_generator', // lowercase name as id (only word char [a-z0-9_])
        name:'Coal Generator', // main-product
        imgSrc:'.\\icon\\building\\Coal_Generator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Coal_Generator', // gamepedia link
        info:'Burns Coal to boil Water, the produced steam rotates turbines to generate electricity for the power grid.\nHas a Conveyor Belt and Pipe input, so both the Coal and Water supply can be automated.\nResource consumption will automatically be lowered to meet power demands.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:-1, // x max per itemslot (-1 if not an item)
        building:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:75, // electricity produced in MW total
            fuel:[ //~ IN
                'coal', // idName of fuel
                'compacted_coal','petroleum_coke'
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
        },
        building:{
            conveyorInputs:2,
            pipeInputs:1,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[10,36,25], // w,h,d in meters (0.00m float)
            items:{
                'reinforced_iron_plate':20, // num needed of (idName) for building the building
                'rotor':10,
                'cable':30,
            },
        },
    },
    'constructor':{
        idName:'constructor', // lowercase name as id (only word char [a-z0-9_])
        name:'Constructor', // main-product
        imgSrc:'.\\icon\\building\\Constructor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Constructor', // gamepedia link
        info:'Crafts one part into another part.\nCan be automated by feeding parts into it with a conveyor belt connected to the input. The produced parts can be automatically extracted by connecting a conveyor belt to the output.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        building:true,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            conveyorInputs:1,
            pipeInputs:0,
            conveyorOutputs:1,
            pipeOutputs:0,
            power:4, // power usage in MW
            dimensions:[8,7,10], // w,h,d in meters (0.00m float)
            items:{
                'reinforced_iron_plate':2, // num needed of (idName) for building the building
                'cable':8,
            },
        },
    },
    'conveyor_belt_mk1':{//HR__##########################################
        idName:'conveyor_belt_mk1', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Belt Mk.1', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Belt_Mk.1.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Belt_Mk.1', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        building:false,
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
    },
    'conveyor_belt_mk2':{
        idName:'conveyor_belt_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Belt Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Belt_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Belt_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_belt_mk3':{
        idName:'conveyor_belt_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Belt Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Belt_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Belt_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_belt_mk4':{
        idName:'conveyor_belt_mk4', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Belt Mk.4', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Belt_Mk.4.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Belt_Mk.4', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_belt_mk5':{
        idName:'conveyor_belt_mk5', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Belt Mk.5', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Belt_Mk.5.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Belt_Mk.5', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_lift_mk1':{
        idName:'conveyor_lift_mk1', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Lift', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Lift.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Lift', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_lift_mk2':{
        idName:'conveyor_lift_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Lift Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Lift_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Lift_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_lift_mk3':{
        idName:'conveyor_lift_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Lift Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Lift_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Lift_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_lift_mk4':{
        idName:'conveyor_lift_mk4', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Lift Mk.4', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Lift_Mk.4.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Lift_Mk.4', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_lift_mk5':{
        idName:'conveyor_lift_mk5', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Lift Mk.5', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Lift_Mk.5.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Lift_Mk.5', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_merger':{
        idName:'conveyor_merger', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Merger', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Merger.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Merger', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_pole':{
        idName:'conveyor_pole', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Pole', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Pole.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Pole', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_splitter':{
        idName:'conveyor_splitter', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Splitter', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Splitter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Splitter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'conveyor_wall_mount':{
        idName:'conveyor_wall_mount', // lowercase name as id (only word char [a-z0-9_])
        name:'Conveyor Wall Mount', // main-product
        imgSrc:'.\\icon\\building\\Conveyor_Wall_Mount.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Conveyor_Wall_Mount', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'craft_bench':{
        idName:'craft_bench', // lowercase name as id (only word char [a-z0-9_])
        name:'Craft Bench', // main-product
        imgSrc:'.\\icon\\building\\Craft_Bench.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Craft_Bench', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_ramp_8m_x_2m':{
        idName:'double_ramp_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Ramp 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Double_Ramp_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Ramp_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_ramp_8m_x_4m':{
        idName:'double_ramp_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Ramp 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Double_Ramp_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Ramp_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_ramp_8m_x_8m':{
        idName:'double_ramp_8m_x_8m', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Ramp 8m x 8m', // main-product
        imgSrc:'.\\icon\\building\\Double_Ramp_8m_x_8m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Ramp_8m_x_8m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_wall_outlet_mk1':{
        idName:'double_wall_outlet_mk1', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Wall Outlet', // main-product
        imgSrc:'.\\icon\\building\\Double_Wall_Outlet.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Wall_Outlet', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_wall_outlet_mk2':{
        idName:'double_wall_outlet_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Wall Outlet Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Double_Wall_Outlet_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Wall_Outlet_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'double_wall_outlet_mk3':{
        idName:'double_wall_outlet_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Double Wall Outlet Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Double_Wall_Outlet_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Double_Wall_Outlet_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'down_corner_ramp_8m_x_1m':{
        idName:'down_corner_ramp_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Down Corner Ramp 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Down_Corner_Ramp_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Down_Corner_Ramp_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'down_corner_ramp_8m_x_2m':{
        idName:'down_corner_ramp_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Down Corner Ramp 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Down_Corner_Ramp_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Down_Corner_Ramp_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'down_corner_ramp_8m_x_4m':{
        idName:'down_corner_ramp_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Down Corner Ramp 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Down_Corner_Ramp_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Down_Corner_Ramp_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'empty_platform':{
        idName:'empty_platform', // lowercase name as id (only word char [a-z0-9_])
        name:'Empty Platform', // main-product
        imgSrc:'.\\icon\\building\\Empty_Platform.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Empty_Platform', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'equipment_workshop':{
        idName:'equipment_workshop', // lowercase name as id (only word char [a-z0-9_])
        name:'Equipment Workshop', // main-product
        imgSrc:'.\\icon\\building\\Equipment_Workshop.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Equipment_Workshop', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fence':{
        idName:'fence', // lowercase name as id (only word char [a-z0-9_])
        name:'Fence', // main-product
        imgSrc:'.\\icon\\building\\Fence.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fence', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fluid_buffer':{
        idName:'fluid_buffer', // lowercase name as id (only word char [a-z0-9_])
        name:'Fluid Buffer', // main-product
        imgSrc:'.\\icon\\building\\Fluid_Buffer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fluid_Buffer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fluid_freight_platform':{
        idName:'fluid_freight_platform', // lowercase name as id (only word char [a-z0-9_])
        name:'Fluid Freight Platform', // main-product
        imgSrc:'.\\icon\\building\\Fluid_Freight_Platform.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fluid_Freight_Platform', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'foundation_8m_x_1m':{
        idName:'foundation_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Foundation 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Foundation_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Foundation_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'foundation_8m_x_2m':{
        idName:'foundation_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Foundation 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Foundation_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Foundation_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'foundation_8m_x_4m':{
        idName:'foundation_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Foundation 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Foundation_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Foundation_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'foundry':{
        idName:'foundry', // lowercase name as id (only word char [a-z0-9_])
        name:'Foundry', // main-product
        imgSrc:'.\\icon\\building\\Foundry.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Foundry', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'frame_foundation_8m_x_4m':{
        idName:'frame_foundation_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Frame Foundation 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Frame_Foundation_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Frame_Foundation_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'frame_window':{
        idName:'frame_window', // lowercase name as id (only word char [a-z0-9_])
        name:'Frame Window', // main-product
        imgSrc:'.\\icon\\building\\Frame_Window.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Frame_Window', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'freight_platform':{
        idName:'freight_platform', // lowercase name as id (only word char [a-z0-9_])
        name:'Freight Platform', // main-product
        imgSrc:'.\\icon\\building\\Freight_Platform.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Freight_Platform', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fuel_generator':{
        idName:'fuel_generator', // lowercase name as id (only word char [a-z0-9_])
        name:'Fuel Generator', // main-product
        imgSrc:'.\\icon\\building\\Fuel_Generator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fuel_Generator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'gate_wall':{
        idName:'gate_wall', // lowercase name as id (only word char [a-z0-9_])
        name:'Gate Wall', // main-product
        imgSrc:'.\\icon\\building\\Gate_Wall.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Gate_Wall', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'geo_thermal_generator':{
        idName:'geo_thermal_generator', // lowercase name as id (only word char [a-z0-9_])
        name:'Geo Thermal Generator', // main-product
        imgSrc:'.\\icon\\building\\Geo_Thermal_Generator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Geo_Thermal_Generator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'glass_foundation_8m_x_1m':{
        idName:'glass_foundation_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Glass Foundation 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Glass_Foundation_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Glass_Foundation_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hyper_tube':{
        idName:'hyper_tube', // lowercase name as id (only word char [a-z0-9_])
        name:'Hyper Tube', // main-product
        imgSrc:'.\\icon\\building\\Hyper_Tube.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hyper_Tube', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hyper_tube_entrance':{
        idName:'hyper_tube_entrance', // lowercase name as id (only word char [a-z0-9_])
        name:'Hyper Tube Entrance', // main-product
        imgSrc:'.\\icon\\building\\Hyper_Tube_Entrance.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hyper_Tube_Entrance', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hyper_tube_support':{
        idName:'hyper_tube_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Hyper Tube Support', // main-product
        imgSrc:'.\\icon\\building\\Hyper_Tube_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hyper_Tube_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hyper_tube_wall_hole':{
        idName:'hyper_tube_wall_hole', // lowercase name as id (only word char [a-z0-9_])
        name:'Hyper Tube Wall Hole', // main-product
        imgSrc:'.\\icon\\building\\Hyper_Tube_Wall_Hole.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hyper_Tube_Wall_Hole', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hyper_tube_wall_support':{
        idName:'hyper_tube_wall_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Hyper Tube Wall Support', // main-product
        imgSrc:'.\\icon\\building\\Hyper_Tube_Wall_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hyper_Tube_Wall_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'industrial_fluid_buffer':{
        idName:'industrial_fluid_buffer', // lowercase name as id (only word char [a-z0-9_])
        name:'Industrial Fluid Buffer', // main-product
        imgSrc:'.\\icon\\building\\Industrial_Fluid_Buffer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Industrial_Fluid_Buffer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'industrial_storage_container':{
        idName:'industrial_storage_container', // lowercase name as id (only word char [a-z0-9_])
        name:'Industrial Storage Container', // main-product
        imgSrc:'.\\icon\\building\\Industrial_Storage_Container.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Industrial_Storage_Container', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inner_corner_quarter_pipe':{
        idName:'inner_corner_quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Inner-Corner Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Inner-Corner_Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inner-Corner_Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_inner_corner_quarter_pipe':{
        idName:'inverted_inner_corner_quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Inner-Corner Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Inner-Corner_Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Inner-Corner_Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_outer_corner_quarter_pipe':{
        idName:'inverted_outer_corner_quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Outer-Corner Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Outer-Corner_Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Outer-Corner_Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_quarter_pipe':{
        idName:'inverted_quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_ramp_8m_x_1m':{
        idName:'inverted_ramp_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Ramp 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Ramp_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Ramp_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_ramp_8m_x_2m':{
        idName:'inverted_ramp_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Ramp 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Ramp_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Ramp_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'inverted_ramp_8m_x_4m':{
        idName:'inverted_ramp_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Inverted Ramp 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Inverted_Ramp_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Inverted_Ramp_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'jump_pad':{
        idName:'jump_pad', // lowercase name as id (only word char [a-z0-9_])
        name:'Jump Pad', // main-product
        imgSrc:'.\\icon\\building\\Jump_Pad.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Jump_Pad', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'left_door_wall__plating':{
        idName:'left_door_wall__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Left Door Wall (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Left_Door_Wall_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Left_Door_Wall_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'left_door_wall__sheet_metal':{
        idName:'left_door_wall__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Left Door Wall (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Left_Door_Wall_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Left_Door_Wall_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'lookout_tower':{
        idName:'lookout_tower', // lowercase name as id (only word char [a-z0-9_])
        name:'Lookout Tower', // main-product
        imgSrc:'.\\icon\\building\\Lookout_Tower.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Lookout_Tower', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'mam':{
        idName:'mam', // lowercase name as id (only word char [a-z0-9_])
        name:'M.A.M.', // main-product
        imgSrc:'.\\icon\\building\\M.A.M..png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/M.A.M.', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'manufacturer':{
        idName:'manufacturer', // lowercase name as id (only word char [a-z0-9_])
        name:'Manufacturer', // main-product
        imgSrc:'.\\icon\\building\\Manufacturer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Manufacturer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'miner_mk1':{
        idName:'miner_mk1', // lowercase name as id (only word char [a-z0-9_])
        name:'Miner Mk.1', // main-product
        imgSrc:'.\\icon\\building\\Miner_Mk.1.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Miner_Mk.1', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'miner_mk2':{
        idName:'miner_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Miner Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Miner_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Miner_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'miner_mk3':{
        idName:'miner_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Miner Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Miner_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Miner_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'nuclear_power_plant':{
        idName:'nuclear_power_plant', // lowercase name as id (only word char [a-z0-9_])
        name:'Nuclear Power Plant', // main-product
        imgSrc:'.\\icon\\building\\Nuclear_Power_Plant.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Nuclear_Power_Plant', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'oil_extractor':{
        idName:'oil_extractor', // lowercase name as id (only word char [a-z0-9_])
        name:'Oil Extractor', // main-product
        imgSrc:'.\\icon\\building\\Oil_Extractor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Oil_Extractor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'oil_pump':{
        idName:'oil_pump', // lowercase name as id (only word char [a-z0-9_])
        name:'Oil Pump', // main-product
        imgSrc:'.\\icon\\building\\Oil_Pump.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Oil_Pump', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'outer_corner_quarter_pipe':{
        idName:'outer_corner_quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Outer-Corner Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Outer-Corner_Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Outer-Corner_Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'panel_window':{
        idName:'panel_window', // lowercase name as id (only word char [a-z0-9_])
        name:'Panel Window', // main-product
        imgSrc:'.\\icon\\building\\Panel_Window.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Panel_Window', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'personal_storage_box':{
        idName:'personal_storage_box', // lowercase name as id (only word char [a-z0-9_])
        name:'Personal Storage Box', // main-product
        imgSrc:'.\\icon\\building\\Personal_Storage_Box.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Personal_Storage_Box', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pillar_base':{
        idName:'pillar_base', // lowercase name as id (only word char [a-z0-9_])
        name:'Pillar Base', // main-product
        imgSrc:'.\\icon\\building\\Pillar_Base.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pillar_Base', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pillar_middle':{
        idName:'pillar_middle', // lowercase name as id (only word char [a-z0-9_])
        name:'Pillar Middle', // main-product
        imgSrc:'.\\icon\\building\\Pillar_Middle.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pillar_Middle', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pillar_top':{
        idName:'pillar_top', // lowercase name as id (only word char [a-z0-9_])
        name:'Pillar Top', // main-product
        imgSrc:'.\\icon\\building\\Pillar_Top.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pillar_Top', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline':{
        idName:'pipeline', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline', // main-product
        imgSrc:'.\\icon\\building\\Pipeline.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline_junction_cross':{
        idName:'pipeline_junction_cross', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline Junction Cross', // main-product
        imgSrc:'.\\icon\\building\\Pipeline_Junction_Cross.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline_Junction_Cross', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline_pump':{
        idName:'pipeline_pump', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline Pump', // main-product
        imgSrc:'.\\icon\\building\\Pipeline_Pump.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline_Pump', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline_support':{
        idName:'pipeline_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline Support', // main-product
        imgSrc:'.\\icon\\building\\Pipeline_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline_wall_hole':{
        idName:'pipeline_wall_hole', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline Wall Hole', // main-product
        imgSrc:'.\\icon\\building\\Pipeline_Wall_Hole.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline_Wall_Hole', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'pipeline_wall_support':{
        idName:'pipeline_wall_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Pipeline Wall Support', // main-product
        imgSrc:'.\\icon\\building\\Pipeline_Wall_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Pipeline_Wall_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'portable_miner':{
        idName:'portable_miner', // lowercase name as id (only word char [a-z0-9_])
        name:'Portable Miner', // main-product
        imgSrc:'.\\icon\\building\\Portable_Miner.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Portable_Miner', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'power_line':{
        idName:'power_line', // lowercase name as id (only word char [a-z0-9_])
        name:'Power Line', // main-product
        imgSrc:'.\\icon\\building\\Power_Line.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Power_Line', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'power_pole_mk1':{
        idName:'power_pole_mk1', // lowercase name as id (only word char [a-z0-9_])
        name:'Power Pole', // main-product
        imgSrc:'.\\icon\\building\\Power_Pole.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Power_Pole', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'power_pole_mk2':{
        idName:'power_pole_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Power Pole Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Power_Pole_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Power_Pole_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'power_pole_mk3':{
        idName:'power_pole_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Power Pole Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Power_Pole_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Power_Pole_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'programmable_splitter':{
        idName:'programmable_splitter', // lowercase name as id (only word char [a-z0-9_])
        name:'Programmable Splitter', // main-product
        imgSrc:'.\\icon\\building\\Programmable_Splitter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Programmable_Splitter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'quarter_pipe':{
        idName:'quarter_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Quarter Pipe', // main-product
        imgSrc:'.\\icon\\building\\Quarter_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Quarter_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'radar_tower':{
        idName:'radar_tower', // lowercase name as id (only word char [a-z0-9_])
        name:'Radar Tower', // main-product
        imgSrc:'.\\icon\\building\\Radar_Tower.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Radar_Tower', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'railway':{
        idName:'railway', // lowercase name as id (only word char [a-z0-9_])
        name:'Railway', // main-product
        imgSrc:'.\\icon\\building\\Railway.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Railway', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'ramp_8m_x_1m':{
        idName:'ramp_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Ramp 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Ramp_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Ramp_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'ramp_8m_x_2m':{
        idName:'ramp_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Ramp 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Ramp_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Ramp_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'ramp_8m_x_4m':{
        idName:'ramp_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Ramp 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Ramp_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Ramp_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'refinery':{
        idName:'refinery', // lowercase name as id (only word char [a-z0-9_])
        name:'Refinery', // main-product
        imgSrc:'.\\icon\\building\\Refinery.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Refinery', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'reinforced_window':{
        idName:'reinforced_window', // lowercase name as id (only word char [a-z0-9_])
        name:'Reinforced Window', // main-product
        imgSrc:'.\\icon\\building\\Reinforced_Window.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Reinforced_Window', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'right_door_wall__plating':{
        idName:'right_door_wall__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Right Door Wall (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Right_Door_Wall_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Right_Door_Wall_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'right_door_wall__sheet_metal':{
        idName:'right_door_wall__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Right Door Wall (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Right_Door_Wall_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Right_Door_Wall_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'single_window':{
        idName:'single_window', // lowercase name as id (only word char [a-z0-9_])
        name:'Single Window', // main-product
        imgSrc:'.\\icon\\building\\Single_Window.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Single_Window', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'smart_splitter':{
        idName:'smart_splitter', // lowercase name as id (only word char [a-z0-9_])
        name:'Smart Splitter', // main-product
        imgSrc:'.\\icon\\building\\Smart_Splitter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Smart_Splitter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'smelter':{
        idName:'smelter', // lowercase name as id (only word char [a-z0-9_])
        name:'Smelter', // main-product
        imgSrc:'.\\icon\\building\\Smelter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Smelter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'space_elevator':{
        idName:'space_elevator', // lowercase name as id (only word char [a-z0-9_])
        name:'Space Elevator', // main-product
        imgSrc:'.\\icon\\building\\Space_Elevator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Space_Elevator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stackable_conveyor_pole':{
        idName:'stackable_conveyor_pole', // lowercase name as id (only word char [a-z0-9_])
        name:'Stackable Conveyor Pole', // main-product
        imgSrc:'.\\icon\\building\\Stackable_Conveyor_Pole.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stackable_Conveyor_Pole', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stackable_hyper_tube_support':{
        idName:'stackable_hyper_tube_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Stackable Hyper Tube Support', // main-product
        imgSrc:'.\\icon\\building\\Stackable_Hyper_Tube_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stackable_Hyper_Tube_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
        shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stackable_pipeline_support':{
        idName:'stackable_pipeline_support', // lowercase name as id (only word char [a-z0-9_])
        name:'Stackable Pipeline Support', // main-product
        imgSrc:'.\\icon\\building\\Stackable_Pipeline_Support.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stackable_Pipeline_Support', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stairs_left':{
        idName:'stairs_left', // lowercase name as id (only word char [a-z0-9_])
        name:'Stairs Left', // main-product
        imgSrc:'.\\icon\\building\\Stairs_Left.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stairs_Left', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stairs_right':{
        idName:'stairs_right', // lowercase name as id (only word char [a-z0-9_])
        name:'Stairs Right', // main-product
        imgSrc:'.\\icon\\building\\Stairs_Right.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stairs_Right', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'storage_container':{
        idName:'storage_container', // lowercase name as id (only word char [a-z0-9_])
        name:'Storage Container', // main-product
        imgSrc:'.\\icon\\building\\Storage_Container.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Storage_Container', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'the_hub':{
        idName:'the_hub', // lowercase name as id (only word char [a-z0-9_])
        name:'The HUB', // main-product
        imgSrc:'.\\icon\\building\\The_HUB.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/The_HUB', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'tilted_jump_pad':{
        idName:'tilted_jump_pad', // lowercase name as id (only word char [a-z0-9_])
        name:'Tilted Jump Pad', // main-product
        imgSrc:'.\\icon\\building\\Tilted_Jump_Pad.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Tilted_Jump_Pad', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'train_station':{
        idName:'train_station', // lowercase name as id (only word char [a-z0-9_])
        name:'Train Station', // main-product
        imgSrc:'.\\icon\\building\\Train_Station.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Train_Station', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'truck_station':{
        idName:'truck_station', // lowercase name as id (only word char [a-z0-9_])
        name:'Truck Station', // main-product
        imgSrc:'.\\icon\\building\\Truck_Station.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Truck_Station', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'u_jelly_landing_pad':{
        idName:'u_jelly_landing_pad', // lowercase name as id (only word char [a-z0-9_])
        name:'U-Jelly Landing Pad', // main-product
        imgSrc:'.\\icon\\building\\U-Jelly_Landing_Pad.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/U-Jelly_Landing_Pad', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_8m_x_1m_inverted':{
        idName:'up_corner_8m_x_1m_inverted', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner 8m x 1m Inverted', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_8m_x_1m_Inverted.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_8m_x_1m_Inverted', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_8m_x_2m_inverted':{
        idName:'up_corner_8m_x_2m_inverted', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner 8m x 2m Inverted', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_8m_x_2m_Inverted.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_8m_x_2m_Inverted', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_8m_x_4m_inverted':{
        idName:'up_corner_8m_x_4m_inverted', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner 8m x 4m Inverted', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_8m_x_4m_Inverted.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_8m_x_4m_Inverted', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_ramp_8m_x_1m':{
        idName:'up_corner_ramp_8m_x_1m', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner Ramp 8m x 1m', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_Ramp_8m_x_1m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_Ramp_8m_x_1m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_ramp_8m_x_2m':{
        idName:'up_corner_ramp_8m_x_2m', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner Ramp 8m x 2m', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_Ramp_8m_x_2m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_Ramp_8m_x_2m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'up_corner_ramp_8m_x_4m':{
        idName:'up_corner_ramp_8m_x_4m', // lowercase name as id (only word char [a-z0-9_])
        name:'Up Corner Ramp 8m x 4m', // main-product
        imgSrc:'.\\icon\\building\\Up_Corner_Ramp_8m_x_4m.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Up_Corner_Ramp_8m_x_4m', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'walkway_crossing':{
        idName:'walkway_crossing', // lowercase name as id (only word char [a-z0-9_])
        name:'Walkway Crossing', // main-product
        imgSrc:'.\\icon\\building\\Walkway_Crossing.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Walkway_Crossing', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'walkway_ramp':{
        idName:'walkway_ramp', // lowercase name as id (only word char [a-z0-9_])
        name:'Walkway Ramp', // main-product
        imgSrc:'.\\icon\\building\\Walkway_Ramp.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Walkway_Ramp', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'walkway_straight':{
        idName:'walkway_straight', // lowercase name as id (only word char [a-z0-9_])
        name:'Walkway Straight', // main-product
        imgSrc:'.\\icon\\building\\Walkway_Straight.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Walkway_Straight', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'walkway_t_crossing':{
        idName:'walkway_t_crossing', // lowercase name as id (only word char [a-z0-9_])
        name:'Walkway T-Crossing', // main-product
        imgSrc:'.\\icon\\building\\Walkway_T-Crossing.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Walkway_T-Crossing', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'walkway_turn':{
        idName:'walkway_turn', // lowercase name as id (only word char [a-z0-9_])
        name:'Walkway Turn', // main-product
        imgSrc:'.\\icon\\building\\Walkway_Turn.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Walkway_Turn', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall__plating':{
        idName:'wall__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Wall_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall__sheet_metal':{
        idName:'wall__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Wall_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_perpendicular__plating':{
        idName:'wall_conveyor_perpendicular__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor Perpendicular (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_Perpendicular_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_Perpendicular_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_perpendicular__sheet_metal':{
        idName:'wall_conveyor_perpendicular__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor Perpendicular (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_Perpendicular_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_Perpendicular_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x1__plating':{
        idName:'wall_conveyor_x1__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x1 (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x1_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x1_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x1__sheet_metal':{
        idName:'wall_conveyor_x1__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x1 (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x1_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x1_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x2__plating':{
        idName:'wall_conveyor_x2__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x2 (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x2_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x2_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x2__sheet_metal':{
        idName:'wall_conveyor_x2__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x2 (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x2_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x2_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x3__plating':{
        idName:'wall_conveyor_x3__plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x3 (Plating)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x3_(Plating).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x3_(Plating)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_conveyor_x3__sheet_metal':{
        idName:'wall_conveyor_x3__sheet_metal', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Conveyor x3 (Sheet Metal)', // main-product
        imgSrc:'.\\icon\\building\\Wall_Conveyor_x3_(Sheet_Metal).png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Conveyor_x3_(Sheet_Metal)', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_outlet':{
        idName:'wall_outlet', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Outlet', // main-product
        imgSrc:'.\\icon\\building\\Wall_Outlet.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Outlet', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_outlet_mk2':{
        idName:'wall_outlet_mk2', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Outlet Mk.2', // main-product
        imgSrc:'.\\icon\\building\\Wall_Outlet_Mk.2.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Outlet_Mk.2', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wall_outlet_mk3':{
        idName:'wall_outlet_mk3', // lowercase name as id (only word char [a-z0-9_])
        name:'Wall Outlet Mk.3', // main-product
        imgSrc:'.\\icon\\building\\Wall_Outlet_Mk.3.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wall_Outlet_Mk.3', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'water_extractor':{
        idName:'water_extractor', // lowercase name as id (only word char [a-z0-9_])
        name:'Water Extractor', // main-product
        imgSrc:'.\\icon\\building\\Water_Extractor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Water_Extractor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'blade_runners':{
        idName:'blade_runners', // lowercase name as id (only word char [a-z0-9_])
        name:'Blade Runners', // main-product
        imgSrc:'.\\icon\\equipment\\Blade_Runners.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Blade_Runners', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'chainsaw':{
        idName:'chainsaw', // lowercase name as id (only word char [a-z0-9_])
        name:'Chainsaw', // main-product
        imgSrc:'.\\icon\\equipment\\Chainsaw.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Chainsaw', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'color_gun':{
        idName:'color_gun', // lowercase name as id (only word char [a-z0-9_])
        name:'Color Gun', // main-product
        imgSrc:'.\\icon\\equipment\\Color_Gun.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Color_Gun', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'gas_mask':{
        idName:'gas_mask', // lowercase name as id (only word char [a-z0-9_])
        name:'Gas mask', // main-product
        imgSrc:'.\\icon\\equipment\\Gas_mask.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Gas_mask', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'hazmat_suit':{
        idName:'hazmat_suit', // lowercase name as id (only word char [a-z0-9_])
        name:'Hazmat Suit', // main-product
        imgSrc:'.\\icon\\equipment\\Hazmat_Suit.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Hazmat_Suit', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'jetpack':{
        idName:'jetpack', // lowercase name as id (only word char [a-z0-9_])
        name:'Jetpack', // main-product
        imgSrc:'.\\icon\\equipment\\Jetpack.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Jetpack', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'medicinal_inhaler':{
        idName:'medicinal_inhaler', // lowercase name as id (only word char [a-z0-9_])
        name:'Medicinal Inhaler', // main-product
        imgSrc:'.\\icon\\equipment\\Medicinal_Inhaler.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Medicinal_Inhaler', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'nobelisk_detonator':{
        idName:'nobelisk_detonator', // lowercase name as id (only word char [a-z0-9_])
        name:'Nobelisk Detonator', // main-product
        imgSrc:'.\\icon\\equipment\\Nobelisk_Detonator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Nobelisk_Detonator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'object_scanner':{
        idName:'object_scanner', // lowercase name as id (only word char [a-z0-9_])
        name:'Object Scanner', // main-product
        imgSrc:'.\\icon\\equipment\\Object_Scanner.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Object_Scanner', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'parachute':{
        idName:'parachute', // lowercase name as id (only word char [a-z0-9_])
        name:'Parachute', // main-product
        imgSrc:'.\\icon\\equipment\\Parachute.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Parachute', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'rebar_gun':{
        idName:'rebar_gun', // lowercase name as id (only word char [a-z0-9_])
        name:'Rebar Gun', // main-product
        imgSrc:'.\\icon\\equipment\\Rebar_Gun.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Rebar_Gun', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'rifle':{
        idName:'rifle', // lowercase name as id (only word char [a-z0-9_])
        name:'Rifle', // main-product
        imgSrc:'.\\icon\\equipment\\Rifle.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Rifle', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'xeno_basher':{
        idName:'xeno_basher', // lowercase name as id (only word char [a-z0-9_])
        name:'Xeno-Basher', // main-product
        imgSrc:'.\\icon\\equipment\\Xeno-Basher.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Xeno-Basher', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'xeno_zapper':{
        idName:'xeno_zapper', // lowercase name as id (only word char [a-z0-9_])
        name:'Xeno-Zapper', // main-product
        imgSrc:'.\\icon\\equipment\\Xeno-Zapper.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Xeno-Zapper', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'alumina_solution':{
        idName:'alumina_solution', // lowercase name as id (only word char [a-z0-9_])
        name:'Alumina Solution', // main-product
        imgSrc:'.\\icon\\fluid\\Alumina_Solution.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Alumina_Solution', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fuel':{
        idName:'fuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Fuel', // main-product
        imgSrc:'.\\icon\\fluid\\Fuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'heavy_oil_residue':{
        idName:'heavy_oil_residue', // lowercase name as id (only word char [a-z0-9_])
        name:'Heavy Oil Residue', // main-product
        imgSrc:'.\\icon\\fluid\\Heavy_Oil_Residue.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Heavy_Oil_Residue', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'liquid_biofuel':{
        idName:'liquid_biofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Liquid Biofuel', // main-product
        imgSrc:'.\\icon\\fluid\\Liquid_Biofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Liquid_Biofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'sulfuric_acid':{
        idName:'sulfuric_acid', // lowercase name as id (only word char [a-z0-9_])
        name:'Sulfuric Acid', // main-product
        imgSrc:'.\\icon\\fluid\\Sulfuric_Acid.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Sulfuric_Acid', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'water':{
        idName:'water', // lowercase name as id (only word char [a-z0-9_])
        name:'Water', // main-product
        imgSrc:'.\\icon\\fluid\\Water.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Water', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'turbofuel':{
        idName:'turbofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Turbofuel', // main-product
        imgSrc:'.\\icon\\fluid\\alt\\Turbofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Turbofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'ai_limiter':{
        idName:'ai_limiter', // lowercase name as id (only word char [a-z0-9_])
        name:'A.I. Limiter', // main-product
        imgSrc:'.\\icon\\item\\A.I._Limiter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/A.I._Limiter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'adaptive_control_unit':{
        idName:'adaptive_control_unit', // lowercase name as id (only word char [a-z0-9_])
        name:'Adaptive Control Unit', // main-product
        imgSrc:'.\\icon\\item\\Adaptive_Control_Unit.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Adaptive_Control_Unit', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'alclad_aluminum_sheet':{
        idName:'alclad_aluminum_sheet', // lowercase name as id (only word char [a-z0-9_])
        name:'Alclad Aluminum Sheet', // main-product
        imgSrc:'.\\icon\\item\\Alclad_Aluminum_Sheet.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Alclad_Aluminum_Sheet', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'alien_carapace':{
        idName:'alien_carapace', // lowercase name as id (only word char [a-z0-9_])
        name:'Alien Carapace', // main-product
        imgSrc:'.\\icon\\item\\Alien_Carapace.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Alien_Carapace', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'alien_organs':{
        idName:'alien_organs', // lowercase name as id (only word char [a-z0-9_])
        name:'Alien Organs', // main-product
        imgSrc:'.\\icon\\item\\Alien_Organs.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Alien_Organs', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'aluminum_ingot':{
        idName:'aluminum_ingot', // lowercase name as id (only word char [a-z0-9_])
        name:'Aluminum Ingot', // main-product
        imgSrc:'.\\icon\\item\\Aluminum_Ingot.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Aluminum_Ingot', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'aluminum_scrap':{
        idName:'aluminum_scrap', // lowercase name as id (only word char [a-z0-9_])
        name:'Aluminum Scrap', // main-product
        imgSrc:'.\\icon\\item\\Aluminum_Scrap.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Aluminum_Scrap', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'automated_wiring':{
        idName:'automated_wiring', // lowercase name as id (only word char [a-z0-9_])
        name:'Automated Wiring', // main-product
        imgSrc:'.\\icon\\item\\Automated_Wiring.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Automated_Wiring', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'battery':{
        idName:'battery', // lowercase name as id (only word char [a-z0-9_])
        name:'Battery', // main-product
        imgSrc:'.\\icon\\item\\Battery.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Battery', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'bauxite':{
        idName:'bauxite', // lowercase name as id (only word char [a-z0-9_])
        name:'Bauxite', // main-product
        imgSrc:'.\\icon\\item\\Bauxite.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Bauxite', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'beacon':{
        idName:'beacon', // lowercase name as id (only word char [a-z0-9_])
        name:'Beacon', // main-product
        imgSrc:'.\\icon\\item\\Beacon.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Beacon', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'biofuel':{
        idName:'biofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Biofuel', // main-product
        imgSrc:'.\\icon\\item\\Biofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Biofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'biomass':{
        idName:'biomass', // lowercase name as id (only word char [a-z0-9_])
        name:'Biomass', // main-product
        imgSrc:'.\\icon\\item\\Biomass.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Biomass', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'black_powder':{
        idName:'black_powder', // lowercase name as id (only word char [a-z0-9_])
        name:'Black Powder', // main-product
        imgSrc:'.\\icon\\item\\Black_Powder.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Black_Powder', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'cable':{
        idName:'cable', // lowercase name as id (only word char [a-z0-9_])
        name:'Cable', // main-product
        imgSrc:'.\\icon\\item\\Cable.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Cable', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'caterium_ingot':{
        idName:'caterium_ingot', // lowercase name as id (only word char [a-z0-9_])
        name:'Caterium Ingot', // main-product
        imgSrc:'.\\icon\\item\\Caterium_Ingot.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Caterium_Ingot', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'caterium_ore':{
        idName:'caterium_ore', // lowercase name as id (only word char [a-z0-9_])
        name:'Caterium Ore', // main-product
        imgSrc:'.\\icon\\item\\Caterium_Ore.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Caterium_Ore', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'circuit_board':{
        idName:'circuit_board', // lowercase name as id (only word char [a-z0-9_])
        name:'Circuit Board', // main-product
        imgSrc:'.\\icon\\item\\Circuit_Board.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Circuit_Board', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'coal':{
        idName:'coal', // lowercase name as id (only word char [a-z0-9_])
        name:'Coal', // main-product
        imgSrc:'.\\icon\\item\\Coal.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Coal', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'color_cartridge':{
        idName:'color_cartridge', // lowercase name as id (only word char [a-z0-9_])
        name:'Color Cartridge', // main-product
        imgSrc:'.\\icon\\item\\Color_Cartridge.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Color_Cartridge', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'computer':{
        idName:'computer', // lowercase name as id (only word char [a-z0-9_])
        name:'Computer', // main-product
        imgSrc:'.\\icon\\item\\Computer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Computer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'concrete':{
        idName:'concrete', // lowercase name as id (only word char [a-z0-9_])
        name:'Concrete', // main-product
        imgSrc:'.\\icon\\item\\Concrete.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Concrete', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'copper_ingot':{
        idName:'copper_ingot', // lowercase name as id (only word char [a-z0-9_])
        name:'Copper Ingot', // main-product
        imgSrc:'.\\icon\\item\\Copper_Ingot.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Copper_Ingot', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'copper_ore':{
        idName:'copper_ore', // lowercase name as id (only word char [a-z0-9_])
        name:'Copper Ore', // main-product
        imgSrc:'.\\icon\\item\\Copper_Ore.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Copper_Ore', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'copper_sheet':{
        idName:'copper_sheet', // lowercase name as id (only word char [a-z0-9_])
        name:'Copper Sheet', // main-product
        imgSrc:'.\\icon\\item\\Copper_Sheet.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Copper_Sheet', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'crude_oil':{
        idName:'crude_oil', // lowercase name as id (only word char [a-z0-9_])
        name:'Crude Oil', // main-product
        imgSrc:'.\\icon\\item\\Crude_Oil.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Crude_Oil', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'crystal_oscillator':{
        idName:'crystal_oscillator', // lowercase name as id (only word char [a-z0-9_])
        name:'Crystal Oscillator', // main-product
        imgSrc:'.\\icon\\item\\Crystal_Oscillator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Crystal_Oscillator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'electromagnetic_control_rod':{
        idName:'electromagnetic_control_rod', // lowercase name as id (only word char [a-z0-9_])
        name:'Electromagnetic Control Rod', // main-product
        imgSrc:'.\\icon\\item\\Electromagnetic_Control_Rod.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Electromagnetic_Control_Rod', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'empty_canister':{
        idName:'empty_canister', // lowercase name as id (only word char [a-z0-9_])
        name:'Empty Canister', // main-product
        imgSrc:'.\\icon\\item\\Empty_Canister.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Empty_Canister', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'encased_industrial_beam':{
        idName:'encased_industrial_beam', // lowercase name as id (only word char [a-z0-9_])
        name:'Encased Industrial Beam', // main-product
        imgSrc:'.\\icon\\item\\Encased_Industrial_Beam.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Encased_Industrial_Beam', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'fabric':{
        idName:'fabric', // lowercase name as id (only word char [a-z0-9_])
        name:'Fabric', // main-product
        imgSrc:'.\\icon\\item\\Fabric.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Fabric', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'flower_petals':{
        idName:'flower_petals', // lowercase name as id (only word char [a-z0-9_])
        name:'Flower Petals', // main-product
        imgSrc:'.\\icon\\item\\Flower_Petals.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Flower_Petals', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'gas_filter':{
        idName:'gas_filter', // lowercase name as id (only word char [a-z0-9_])
        name:'Gas Filter', // main-product
        imgSrc:'.\\icon\\item\\Gas_Filter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Gas_Filter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'green_power_slug':{
        idName:'green_power_slug', // lowercase name as id (only word char [a-z0-9_])
        name:'Green Power Slug', // main-product
        imgSrc:'.\\icon\\item\\Green_Power_Slug.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Green_Power_Slug', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'heat_sink':{
        idName:'heat_sink', // lowercase name as id (only word char [a-z0-9_])
        name:'Heat Sink', // main-product
        imgSrc:'.\\icon\\item\\Heat_Sink.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Heat_Sink', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'heavy_modular_frame':{
        idName:'heavy_modular_frame', // lowercase name as id (only word char [a-z0-9_])
        name:'Heavy Modular Frame', // main-product
        imgSrc:'.\\icon\\item\\Heavy_Modular_Frame.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Heavy_Modular_Frame', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'high_speed_connector':{
        idName:'high_speed_connector', // lowercase name as id (only word char [a-z0-9_])
        name:'High-Speed Connector', // main-product
        imgSrc:'.\\icon\\item\\High-Speed_Connector.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/High-Speed_Connector', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'iodine_infused_filter':{
        idName:'iodine_infused_filter', // lowercase name as id (only word char [a-z0-9_])
        name:'Iodine Infused Filter', // main-product
        imgSrc:'.\\icon\\item\\Iodine_Infused_Filter.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Iodine_Infused_Filter', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'iron_ingot':{
        idName:'iron_ingot', // lowercase name as id (only word char [a-z0-9_])
        name:'Iron Ingot', // main-product
        imgSrc:'.\\icon\\item\\Iron_Ingot.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Iron_Ingot', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'iron_ore':{
        idName:'iron_ore', // lowercase name as id (only word char [a-z0-9_])
        name:'Iron Ore', // main-product
        imgSrc:'.\\icon\\item\\Iron_Ore.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Iron_Ore', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'iron_plate':{
        idName:'iron_plate', // lowercase name as id (only word char [a-z0-9_])
        name:'Iron Plate', // main-product
        imgSrc:'.\\icon\\item\\Iron_Plate.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Iron_Plate', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'iron_rod':{
        idName:'iron_rod', // lowercase name as id (only word char [a-z0-9_])
        name:'Iron Rod', // main-product
        imgSrc:'.\\icon\\item\\Iron_Rod.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Iron_Rod', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'limestone':{
        idName:'limestone', // lowercase name as id (only word char [a-z0-9_])
        name:'Limestone', // main-product
        imgSrc:'.\\icon\\item\\Limestone.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Limestone', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'modular_engine':{
        idName:'modular_engine', // lowercase name as id (only word char [a-z0-9_])
        name:'Modular Engine', // main-product
        imgSrc:'.\\icon\\item\\Modular_Engine.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Modular_Engine', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'modular_frame':{
        idName:'modular_frame', // lowercase name as id (only word char [a-z0-9_])
        name:'Modular Frame', // main-product
        imgSrc:'.\\icon\\item\\Modular_Frame.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Modular_Frame', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'modular_frame_light':{
        idName:'modular_frame_light', // lowercase name as id (only word char [a-z0-9_])
        name:'Modular Frame Light', // main-product
        imgSrc:'.\\icon\\item\\Modular_Frame_Light.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Modular_Frame_Light', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'motor':{
        idName:'motor', // lowercase name as id (only word char [a-z0-9_])
        name:'Motor', // main-product
        imgSrc:'.\\icon\\item\\Motor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Motor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'mycelia':{
        idName:'mycelia', // lowercase name as id (only word char [a-z0-9_])
        name:'Mycelia', // main-product
        imgSrc:'.\\icon\\item\\Mycelia.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Mycelia', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'nobelisk':{
        idName:'nobelisk', // lowercase name as id (only word char [a-z0-9_])
        name:'Nobelisk', // main-product
        imgSrc:'.\\icon\\item\\Nobelisk.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Nobelisk', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'nuclear_fuel_rod':{
        idName:'nuclear_fuel_rod', // lowercase name as id (only word char [a-z0-9_])
        name:'Nuclear Fuel Rod', // main-product
        imgSrc:'.\\icon\\item\\Nuclear_Fuel_Rod.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Nuclear_Fuel_Rod', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'nuclear_waste':{
        idName:'nuclear_waste', // lowercase name as id (only word char [a-z0-9_])
        name:'Nuclear Waste', // main-product
        imgSrc:'.\\icon\\item\\Nuclear_Waste.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Nuclear_Waste', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_fuel':{
        idName:'packaged_fuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Fuel', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Fuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Fuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_heavy_oil_residue':{
        idName:'packaged_heavy_oil_residue', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Heavy Oil Residue', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Heavy_Oil_Residue.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Heavy_Oil_Residue', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_liquid_biofuel':{
        idName:'packaged_liquid_biofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Liquid Biofuel', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Liquid_Biofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Liquid_Biofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_oil':{
        idName:'packaged_oil', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Oil', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Oil.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Oil', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_turbofuel':{
        idName:'packaged_turbofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Turbofuel', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Turbofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Turbofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'packaged_water':{
        idName:'packaged_water', // lowercase name as id (only word char [a-z0-9_])
        name:'Packaged Water', // main-product
        imgSrc:'.\\icon\\item\\Packaged_Water.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Packaged_Water', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'petroleum_coke':{
        idName:'petroleum_coke', // lowercase name as id (only word char [a-z0-9_])
        name:'Petroleum Coke', // main-product
        imgSrc:'.\\icon\\item\\Petroleum_Coke.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Petroleum_Coke', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'plastic':{
        idName:'plastic', // lowercase name as id (only word char [a-z0-9_])
        name:'Plastic', // main-product
        imgSrc:'.\\icon\\item\\Plastic.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Plastic', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'polymer_resin':{
        idName:'polymer_resin', // lowercase name as id (only word char [a-z0-9_])
        name:'Polymer Resin', // main-product
        imgSrc:'.\\icon\\item\\Polymer_Resin.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Polymer_Resin', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'power_shard':{
        idName:'power_shard', // lowercase name as id (only word char [a-z0-9_])
        name:'Power Shard', // main-product
        imgSrc:'.\\icon\\item\\Power_Shard.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Power_Shard', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'purple_power_slug':{
        idName:'purple_power_slug', // lowercase name as id (only word char [a-z0-9_])
        name:'Purple Power Slug', // main-product
        imgSrc:'.\\icon\\item\\Purple_Power_Slug.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Purple_Power_Slug', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'quartz_crystal':{
        idName:'quartz_crystal', // lowercase name as id (only word char [a-z0-9_])
        name:'Quartz Crystal', // main-product
        imgSrc:'.\\icon\\item\\Quartz_Crystal.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Quartz_Crystal', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'quickwire':{
        idName:'quickwire', // lowercase name as id (only word char [a-z0-9_])
        name:'Quickwire', // main-product
        imgSrc:'.\\icon\\item\\Quickwire.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Quickwire', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'radio_control_unit':{
        idName:'radio_control_unit', // lowercase name as id (only word char [a-z0-9_])
        name:'Radio Control Unit', // main-product
        imgSrc:'.\\icon\\item\\Radio_Control_Unit.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Radio_Control_Unit', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'raw_quartz':{
        idName:'raw_quartz', // lowercase name as id (only word char [a-z0-9_])
        name:'Raw Quartz', // main-product
        imgSrc:'.\\icon\\item\\Raw_Quartz.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Raw_Quartz', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'reinforced_iron_plate':{
        idName:'reinforced_iron_plate', // lowercase name as id (only word char [a-z0-9_])
        name:'Reinforced Iron Plate', // main-product
        imgSrc:'.\\icon\\item\\Reinforced_Iron_Plate.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Reinforced_Iron_Plate', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'rifle_cartridge':{
        idName:'rifle_cartridge', // lowercase name as id (only word char [a-z0-9_])
        name:'Rifle Cartridge', // main-product
        imgSrc:'.\\icon\\item\\Rifle_Cartridge.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Rifle_Cartridge', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'rotor':{
        idName:'rotor', // lowercase name as id (only word char [a-z0-9_])
        name:'Rotor', // main-product
        imgSrc:'.\\icon\\item\\Rotor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Rotor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'rubber':{
        idName:'rubber', // lowercase name as id (only word char [a-z0-9_])
        name:'Rubber', // main-product
        imgSrc:'.\\icon\\item\\Rubber.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Rubber', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'screw':{
        idName:'screw', // lowercase name as id (only word char [a-z0-9_])
        name:'Screw', // main-product
        imgSrc:'.\\icon\\item\\Screw.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Screw', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'silica':{
        idName:'silica', // lowercase name as id (only word char [a-z0-9_])
        name:'Silica', // main-product
        imgSrc:'.\\icon\\item\\Silica.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Silica', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'smart_plating':{
        idName:'smart_plating', // lowercase name as id (only word char [a-z0-9_])
        name:'Smart Plating', // main-product
        imgSrc:'.\\icon\\item\\Smart_Plating.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Smart_Plating', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'solid_biofuel':{
        idName:'solid_biofuel', // lowercase name as id (only word char [a-z0-9_])
        name:'Solid Biofuel', // main-product
        imgSrc:'.\\icon\\item\\Solid_Biofuel.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Solid_Biofuel', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'spiked_rebar':{
        idName:'spiked_rebar', // lowercase name as id (only word char [a-z0-9_])
        name:'Spiked Rebar', // main-product
        imgSrc:'.\\icon\\item\\Spiked_Rebar.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Spiked_Rebar', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'stator':{
        idName:'stator', // lowercase name as id (only word char [a-z0-9_])
        name:'Stator', // main-product
        imgSrc:'.\\icon\\item\\Stator.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Stator', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'steel_beam':{
        idName:'steel_beam', // lowercase name as id (only word char [a-z0-9_])
        name:'Steel Beam', // main-product
        imgSrc:'.\\icon\\item\\Steel_Beam.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Steel_Beam', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'steel_ingot':{
        idName:'steel_ingot', // lowercase name as id (only word char [a-z0-9_])
        name:'Steel Ingot', // main-product
        imgSrc:'.\\icon\\item\\Steel_Ingot.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Steel_Ingot', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'steel_pipe':{
        idName:'steel_pipe', // lowercase name as id (only word char [a-z0-9_])
        name:'Steel Pipe', // main-product
        imgSrc:'.\\icon\\item\\Steel_Pipe.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Steel_Pipe', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'sulfur':{
        idName:'sulfur', // lowercase name as id (only word char [a-z0-9_])
        name:'Sulfur', // main-product
        imgSrc:'.\\icon\\item\\Sulfur.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Sulfur', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'supercomputer':{
        idName:'supercomputer', // lowercase name as id (only word char [a-z0-9_])
        name:'Supercomputer', // main-product
        imgSrc:'.\\icon\\item\\Supercomputer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Supercomputer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'turbo_motor':{
        idName:'turbo_motor', // lowercase name as id (only word char [a-z0-9_])
        name:'Turbo Motor', // main-product
        imgSrc:'.\\icon\\item\\Turbo_Motor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Turbo_Motor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'uranium':{
        idName:'uranium', // lowercase name as id (only word char [a-z0-9_])
        name:'Uranium', // main-product
        imgSrc:'.\\icon\\item\\Uranium.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Uranium', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'uranium_cell':{
        idName:'uranium_cell', // lowercase name as id (only word char [a-z0-9_])
        name:'Uranium Cell', // main-product
        imgSrc:'.\\icon\\item\\Uranium_Cell.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Uranium_Cell', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'uranium_pellet':{
        idName:'uranium_pellet', // lowercase name as id (only word char [a-z0-9_])
        name:'Uranium Pellet', // main-product
        imgSrc:'.\\icon\\item\\Uranium_Pellet.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Uranium_Pellet', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'versatile_framework':{
        idName:'versatile_framework', // lowercase name as id (only word char [a-z0-9_])
        name:'Versatile Framework', // main-product
        imgSrc:'.\\icon\\item\\Versatile_Framework.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Versatile_Framework', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wire':{
        idName:'wire', // lowercase name as id (only word char [a-z0-9_])
        name:'Wire', // main-product
        imgSrc:'.\\icon\\item\\Wire.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wire', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'wood':{
        idName:'wood', // lowercase name as id (only word char [a-z0-9_])
        name:'Wood', // main-product
        imgSrc:'.\\icon\\item\\Wood.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Wood', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'yellow_power_slug':{
        idName:'yellow_power_slug', // lowercase name as id (only word char [a-z0-9_])
        name:'Yellow Power Slug', // main-product
        imgSrc:'.\\icon\\item\\Yellow_Power_Slug.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Yellow_Power_Slug', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'compacted_coal':{
        idName:'compacted_coal', // lowercase name as id (only word char [a-z0-9_])
        name:'Compacted Coal', // main-product
        imgSrc:'.\\icon\\item\\alt\\Compacted_Coal.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Compacted_Coal', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'electric_locomotive':{
        idName:'electric_locomotive', // lowercase name as id (only word char [a-z0-9_])
        name:'Electric Locomotive', // main-product
        imgSrc:'.\\icon\\vehicle\\Electric_Locomotive.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Electric_Locomotive', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'explorer':{
        idName:'explorer', // lowercase name as id (only word char [a-z0-9_])
        name:'Explorer', // main-product
        imgSrc:'.\\icon\\vehicle\\Explorer.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Explorer', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'freight_car':{
        idName:'freight_car', // lowercase name as id (only word char [a-z0-9_])
        name:'Freight Car', // main-product
        imgSrc:'.\\icon\\vehicle\\Freight_Car.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Freight_Car', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'tractor':{
        idName:'tractor', // lowercase name as id (only word char [a-z0-9_])
        name:'Tractor', // main-product
        imgSrc:'.\\icon\\vehicle\\Tractor.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Tractor', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'truck':{
        idName:'truck', // lowercase name as id (only word char [a-z0-9_])
        name:'Truck', // main-product
        imgSrc:'.\\icon\\vehicle\\Truck.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Truck', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'cyber_wagon':{
        idName:'cyber_wagon', // lowercase name as id (only word char [a-z0-9_])
        name:'Cyber Wagon', // main-product
        imgSrc:'.\\icon\\vehicle\\awesome\\Cyber_Wagon.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Cyber_Wagon', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'factory_cart':{
        idName:'factory_cart', // lowercase name as id (only word char [a-z0-9_])
        name:'Factory Cart', // main-product
        imgSrc:'.\\icon\\vehicle\\awesome\\Factory_Cart.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Factory_Cart', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'mercer_sphere':{
        idName:'mercer_sphere', // lowercase name as id (only word char [a-z0-9_])
        name:'Mercer Sphere', // main-product
        imgSrc:'.\\icon\\wip\\Mercer_Sphere.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Mercer_Sphere', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    }
                }
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                }
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0 // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0 // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        }
                    }
                }
            }
        }
    },
    'somersloop':{
        idName:'somersloop', // lowercase name as id (only word char [a-z0-9_])
        name:'Somersloop', // main-product
        imgSrc:'.\\icon\\wip\\Somersloop.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/Somersloop', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0 // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
                waste:5 // nuclear waste rate per min
            }
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0 // num needed of (idName) for building the building
            }
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                },
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        },
                    },
                },
            },
        },
    },
    'sam_ore':{
        idName:'sam_ore', // lowercase name as id (only word char [a-z0-9_])
        name:'S.A.M. Ore', // main-product
        imgSrc:'.\\icon\\wip\\S.A.M._Ore.png', // path relative .icon\\**.png (all 120px)
        gamepediaLink:'https://satisfactory.gamepedia.com/M._Ore', // gamepedia link
        info:'this is a text.\tthis is a tab.\nthis is a new line.', // information about the item
        sinkValue:-1, // value in the awesome-sink (-1 for can't be sinked)
        stackSize:1, // x max per itemslot (-1 if not an item)
        liquid:false,
        resource:false,
        plant:false,
        animal:false,
        ore:false,
        building:false,
        statue:false,
        awesomeShop:false, // from awesomeShop
        vehicle:false,
        consumable:false,
        craftingMaterial:false,
        craftingWorkshop:false,
        buildingMaterial:false,
        spaceElevatorMaterial:false,
        equipment:false,
        alternateItem:false,
        wip:false,
            shopPackName:'', // if exist package from awesome shop
        testInfo:function(){
            if (hasContent(this.recipes) && hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
            else {return this.idName + '\n' + this.info;}
        },
        generator:{ // all at clockspeed 100%
            energie:0, // electricity produced in MW total
            fuel:[ //~ IN
                'example_part' // idName of fuel
            ],
            cooling:{
                consumption:45, // water consumtion rate m^3 per min
            },
            by_product:{ //~ OUT
                idName:'nuclear_waste', // idName by-product
                production:5, // waste rate per min
            },
        },
        fuel:{ // all at clockspeed 100%
            'biomass_burner':{ // is fuel for "biomass_burner"
                time:0, // burn time in sec
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'coal_generator':{ // is fuel for "coal_generator"
                time:0, // burn time in sec
                cooling:45, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'fuel_generator':{ // is fuel for "fuel_generator"
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
            'nuclear_power_plant':{ // is fuel for "nuclear_power_plant"
                time:300, // burn time in sec
                cooling:300, // water consumption per min
                consumption:0, // consumtion rate per min (fluid in m^3) [60/this.time]
            },
        },
        building:{
            conveyorInputs:0,
            pipeInputs:0,
            conveyorOutputs:0,
            pipeOutputs:0,
            power:0, // power usage in MW
            dimensions:[0,0,0], // w,h,d in meters (0.00m float)
            items:{
                'example_part':0, // num needed of (idName) for building the building
            },
        },
        recipes:{
            default:{
                machine:'constructor', // machine idName needed to produce
                speed:0, // x sec for one cycle
                num:0, // num produced per cycle (fluid is m^3)
                rate:0, // x items per min produced [(this.num/this.speed)*60]
                energie:0, // x MW used to operate
                by_product:{
                    idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                    num:0, // num produced per cycle (fluid is m^3) for by-product
                    rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                },
                items:{
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                    'example_part':{ // name of item needed
                        num:0, // num needed
                        rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                    },
                },
            },
            packing:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                package:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                fluid:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'empty_canister', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            unpacking:{
                machine:'refinery',
                speed:0, // x sec for one cycle
                energie:0, // x MW used to operate
                fluid:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                canister:{ //~ OUT
                    num:2, // num produced per cycle
                    idName:'empty_canister', // idName
                    rate:0, // x items per min produced [(this.num/this.(parentObject).speed)*60]
                },
                package:{ //~ IN
                    num:2, // num needed per cycle
                    idName:'', // name of item needed
                    rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                },
            },
            alternates:{
                'example-alternate':{ // name of alternate-recipe-product
                    machine:'constructor',
                    speed:0, // x sec for one cycle
                    num:0, // num produced per cycle (fluid is m^3)
                    rate:0, // x items per min produced [(this.num/this.speed)*60]
                    energie:0, // x MW used to operate
                    by_product:{
                        idName:'example_part', // lowercase name as id for the by-product (only word char [a-z0-9_])
                        num:0, // num produced per cycle (fluid is m^3) for by-product
                        rate:0, // x items per min produced [(this.by_num/this.(parentObject).speed)*60]
                    },
                    items:{
                        'example_part':{ // name of item needed
                            num:0, // num needed
                            rate:0, // x items per min consumed [(this.num/this.(parentObject).speed)*60]
                        },
                    },
                },
            },
        },
    },
}

if (hasContent(this.recipes)){
    if (hasContent(this.recipes.default.by_product)) {return this.idName + ':\n' + this.info + '\n-------------\n' + this.recipes.default.by_product.idName + ':\n' + dataObjects[this.recipes.default.by_product.idName].info;}
    else {return this.idName + '\n' + this.info;}
} else {return this.idName + '\n' + this.info;}